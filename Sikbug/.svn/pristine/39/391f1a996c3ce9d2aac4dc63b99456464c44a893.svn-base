using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Shapes;
using Microsoft.Phone.Controls;
using googlemaps;
using Microsoft.Maps.MapControl;
using System.Collections.ObjectModel;
using System.Device.Location;

namespace Sikbug.View
{
    public partial class MapPage : PhoneApplicationPage
    {
        //List to bind the loactions
        public ObservableCollection<Model.Location> DiseaseLocations = new ObservableCollection<Model.Location>();

        public ObservableCollection<Model.Location> CurrentLocation = new ObservableCollection<Model.Location>();

        //Adding a pushpin layer along with the popUP
        Microsoft.Maps.MapControl.MapLayer pushPinLayer = new MapLayer();
        
        //Add a mapItemControl for binding pushpins on to the MAP
        Microsoft.Maps.MapControl.MapItemsControl pushPinItemLoc = new MapItemsControl();

        //Add a mapItemControl for binding pushpins on to the MAP
        Microsoft.Maps.MapControl.MapItemsControl pushPinItemDisease = new MapItemsControl();

        //Add a mapItemControl for binding PopUP over the Pushpins
        Microsoft.Maps.MapControl.MapItemsControl pushPinItemPopUp = new MapItemsControl();

        public MapPage()
        {
            InitializeComponent();

            getCoordinates();

            addItemToMap();
            
        
        }

        private void addItemToMap()
        {
            mapSikbug.Children.Add(pushPinLayer);
            mapSikbug.Children.Add(pushPinItemDisease);
            mapSikbug.Children.Add(pushPinItemLoc);

            pushPinLayer.Visibility = Visibility.Collapsed;

           
            pushPinItemLoc.ItemTemplate = dataTemplatePushpin;
            pushPinItemLoc.ItemsSource = DiseaseLocations;

            pushPinItemDisease.ItemTemplate = dataTemplatePushPinCurrentLoc;
            pushPinItemDisease.ItemsSource = CurrentLocation;


        }

        private void getCoordinates()
        {
            #region Generate coordinates(Get from webservice)

            GeoCoordinate l1 = new GeoCoordinate(53, 73);
            GeoCoordinate l2 = new GeoCoordinate(14, 120);
            GeoCoordinate l3 = new GeoCoordinate(48, 133);
            GeoCoordinate l4 = new GeoCoordinate(2, 11);
            GeoCoordinate l5 = new GeoCoordinate(0, 40);

            Model.Location lq = new Model.Location();
            lq.Coordinate = l1;
            Model.Location lw = new Model.Location();
            lw.Coordinate = l2;
            Model.Location le = new Model.Location();
            le.Coordinate = l3;
            Model.Location lr = new Model.Location();
            lr.Coordinate = l4;
            Model.Location lt = new Model.Location();
            lt.Coordinate = l5;

            DiseaseLocations.Add(lq);
            DiseaseLocations.Add(lw);
            DiseaseLocations.Add(le);
            DiseaseLocations.Add(lr);
            DiseaseLocations.Add(lt);

            #endregion

            //Get from Util Current Locn
            GeoCoordinate currentLoc = new GeoCoordinate(46, 73);

            Model.Location CurrentLoc = new Model.Location();
            CurrentLoc.Coordinate = currentLoc;
            CurrentLoc.type = "Loc";

            mapSikbug.Center = CurrentLoc.MapLocation;
            CurrentLocation.Add(CurrentLoc);

        }


        private void Pushpin_MouseEnter(object sender, MouseEventArgs e)
        {
            Pushpin selectedPushpin = (sender as Pushpin);
            Model.Location locn = selectedPushpin.DataContext as Model.Location;
            if (locn.type == null)
            {
                pushPinItemPopUp.ItemTemplate = dataTempPopup;
                pushPinItemPopUp.ItemsSource = DiseaseLocations;

                pushPinLayer.Visibility = Visibility.Visible;

                if (pushPinLayer.Children.Contains(pushPinItemPopUp))
                    pushPinLayer.Children.Remove(pushPinItemPopUp);

                pushPinLayer.AddChild(pushPinItemPopUp, selectedPushpin.Location);
            }
            else
            {
                if (pushPinLayer.Children.Contains(pushPinItemPopUp))
                    pushPinLayer.Children.Remove(pushPinItemPopUp);
            
            }
        }

       
        private void TextBlock_MouseEnter(object sender, MouseEventArgs e)
        {
            NavigationService.Navigate(new Uri("/View/SicknessAroundMe.xaml", UriKind.RelativeOrAbsolute));
        }

       

    }

    #region GOOGLE MAP DISPLAY

    public enum GoogleTileTypes
    {
        Hybrid,
        Physical,
        Street,
        Satellite,
        WaterOverlay
    }

    public class GoogleTile : Microsoft.Phone.Controls.Maps.TileSource
    {
        private int _server;
        private char _mapmode;
        private GoogleTileTypes _tiletypes;

        public GoogleTileTypes TileTypes
        {
            get { return _tiletypes; }
            set
            {
                _tiletypes = value;
                MapMode = MapModeConverter(value);
            }
        }

        public char MapMode
        {
            get { return _mapmode; }
            set { _mapmode = value; }
        }

        public int Server
        {
            get { return _server; }
            set { _server = value; }
        }

        public GoogleTile()
        {
            UriFormat = @"http://mt{0}.google.com/vt/lyrs={1}&z={2}&x={3}&y={4}";
            Server = 0;
        }

        public override Uri GetUri(int x, int y, int zoomLevel)
        {
            if (zoomLevel > 0)
            {
                var Url = string.Format(UriFormat, Server, MapMode, zoomLevel, x, y);
                return new Uri(Url);
            }
            return null;
        }

        private char MapModeConverter(GoogleTileTypes tiletype)
        {
            switch (tiletype)
            {
                case GoogleTileTypes.Hybrid:
                    {
                        return 'y';
                    }
                case GoogleTileTypes.Physical:
                    {
                        return 't';
                    }
                case GoogleTileTypes.Satellite:
                    {
                        return 's';
                    }
                case GoogleTileTypes.Street:
                    {
                        return 'm';
                    }
                case GoogleTileTypes.WaterOverlay:
                    {
                        return 'r';
                    }
            }
            return ' ';
        }
    }
} 
    #endregion
   